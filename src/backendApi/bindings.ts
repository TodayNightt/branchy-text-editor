/* eslint-disable */
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

declare global {
    interface Window {
        __TAURI_INVOKE__<T>(cmd: string, args?: Record<string, unknown>): Promise<T>;
    }
}

// Function avoids 'window not defined' in SSR
const invoke = () => window.__TAURI_INVOKE__;

export function getFileSystemInfo(dir: string | null) {
    return invoke()<FileSystemInfo>("get_file_system_info", { dir })
}

export function openFile(path: string) {
    return invoke()<OpenFile>("open_file", { path })
}

export function getSourceCodeIfAny(id: number) {
    return invoke()<string | null>("get_source_code_if_any", { id })
}

export function closeFile(id: number) {
    return invoke()<null>("close_file", { id })
}

export function saveFile(id: number) {
    return invoke()<null>("save_file", { id })
}

export function handleFileChanges(id: number, sourceCode: string, range: ChangesRange | null) {
    return invoke()<null>("handle_file_changes", { id,sourceCode,range })
}

export function reset() {
    return invoke()<null>("reset")
}

export function getCurrentLanguageTheme() {
    return invoke()<LanguageTheme>("get_current_language_theme")
}

export function getEditorConfig() {
    return invoke()<[LanguageTheme, EditorTheme]>("get_editor_config")
}

export function getTokensLegend(lang: Lang) {
    return invoke()<SemanticLegend>("get_tokens_legend", { lang })
}

export function setHighlights(id: number, rangedSourceCode: string) {
    return invoke()<number[]>("set_highlights", { id,rangedSourceCode })
}

export function getCurrentlySupportedLanguage() {
    return invoke()<Lang[]>("get_currently_supported_language")
}

export type EditorTheme = { background: string }
export type ChangesRange = { start_byte: number; old_end_byte: number; new_end_byte: number; start_position: CustomPoint; old_end_position: CustomPoint; new_end_position: CustomPoint }
export type Theme = { rules: Token[] }
export type SemanticLegend = { _token_types: string[]; _token_modifier: string[] }
export type OpenFile = { id: number; name: string; language: Lang | null; same_name_exist: boolean; path: string }
export type LanguageTheme = { default: Theme; javascript: Theme | null; rust: Theme | null; java: Theme | null; html: Theme | null; css: Theme | null; python: Theme | null; ruby: Theme | null }
export type CustomPoint = { row: number; column: number }
export type Token = { token: string; foreground: string }
export type Lang = "Javascript" | "Typescript" | "Rust" | "Python" | "Java" | "Ruby" | "Html" | "Css" | "Json"
export type FileSystemInfo = { current_directory: string; directory_items: DirectoryItem[] }
export type DirectoryItem = { is_file: boolean; name: string; path: string; childrens: DirectoryItem[] | null }
