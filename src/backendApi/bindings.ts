
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async getFileSystemInfo(dir: string | null) : Promise<Response<FileSystemInfo>> {
    return await TAURI_INVOKE("get_file_system_info", { dir });
},
async openFile(path: string) : Promise<Response<OpenFile>> {
    return await TAURI_INVOKE("open_file", { path });
},
async getSourceCodeIfAny(id: number) : Promise<Response<string>> {
    return await TAURI_INVOKE("get_source_code_if_any", { id });
},
async closeFile(id: number) : Promise<Response<null>> {
    return await TAURI_INVOKE("close_file", { id });
},
async saveFile(id: number) : Promise<Response<null>> {
    return await TAURI_INVOKE("save_file", { id });
},
async handleFileChanges(id: number, sourceCode: string, range: ChangesRange | null) : Promise<Response<null>> {
    return await TAURI_INVOKE("handle_file_changes", { id, sourceCode, range });
},
async reset() : Promise<Response<null>> {
    return await TAURI_INVOKE("reset");
},
async getCurrentLanguageTheme() : Promise<Response<LanguageTheme>> {
    return await TAURI_INVOKE("get_current_language_theme");
},
async getEditorConfig() : Promise<Response<[LanguageTheme, EditorTheme]>> {
    return await TAURI_INVOKE("get_editor_config");
},
async getTokensLegend(lang: Lang) : Promise<Response<SemanticLegend>> {
    return await TAURI_INVOKE("get_tokens_legend", { lang });
},
async setHighlights(id: number, rangedSourceCode: string, range: RangePoint) : Promise<Response<number[]>> {
    return await TAURI_INVOKE("set_highlights", { id, rangedSourceCode, range });
},
async getCurrentlySupportedLanguage() : Promise<Lang[]> {
    return await TAURI_INVOKE("get_currently_supported_language");
}
}

/** user-defined events **/



/** user-defined constants **/



/** user-defined types **/

export type Basic = null
export type ChangesRange = { start_byte: number; old_end_byte: number; new_end_byte: number; start_position: CustomPoint; old_end_position: CustomPoint; new_end_position: CustomPoint }
export type Css = null
export type CustomPoint = { row: number; column: number }
export type DirectoryItem = { is_file: boolean; name: string; path: string; childrens: DirectoryItem[] | null }
export type EditorTheme = { background: string }
export type FileSystemInfo = { current_directory: string; directory_items: DirectoryItem[] }
export type Html = null
export type Java = null
export type Javascript = null
export type Lang = "Javascript" | "Typescript" | "Rust" | "Python" | "Java" | "Ruby" | "Html" | "Css" | "Json"
export type LanguageTheme = { default: Theme<Basic>; javascript: Theme<Javascript> | null; rust: Theme<Rust> | null; java: Theme<Java> | null; html: Theme<Html> | null; css: Theme<Css> | null; python: Theme<Python> | null; ruby: Theme<Ruby> | null }
export type OpenFile = { id: number; name: string; language: Lang | null; same_name_exist: boolean; path: string }
export type Python = null
export type RangePoint = [number, number, number, number]
export type Response<T> = { Success: T } | { Error: string }
export type Ruby = null
export type Rust = null
export type SemanticLegend = { _token_types: string[]; _token_modifier: string[] }
export type Theme<T> = { rules: Token[] }
export type Token = { token: string; foreground: string }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
